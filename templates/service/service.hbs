import { Injectable } from '@nestjs/common';
{{#if module.hasRepository}}
import { {{module.name}} } from '../models/{{module.nameLower}}.model';
import { {{module.name}}Repository } from '../repositorys/{{module.nameLower}}.repository';
{{/if}}
{{#if module.hasStrategies}}
import { {{module.name}}StrategyFactory } from '../strategies/{{module.nameLower}}-strategy.factory';
{{/if}}
{{#if module.responses}}

{{#each module.responses}}
import { {{name}} } from '../dtos/{{module_name}}.response.dto';
{{/each}}
{{/if}}

{{#if module.updates}}
{{#each module.updates}}
import { {{name}} } from '../dtos/{{module_name}}.update.dto';
{{/each}}
{{/if}}


@Injectable()
export class {{module.name}}Service {
  constructor(
    {{#if module.hasStrategies}}
    private readonly strategyFactory: {{module.name}}StrategyFactory
    {{/if}}
    {{#if module.hasRepository}}
    {{#if module.hasStrategies}}, {{/if}}
    private readonly {{module.nameLower}}Repository: {{module.name}}Repository
    {{/if}}

  ) {}

  {{#each module.service.methods}}
  async {{name}}(
    {{#if params}}
      {{#each params}}
      {{name}}: {{type}}{{#unless @last}},{{/unless}}
      {{/each}}
    {{/if}}
    {{#if update}}
      {{#if params}}, {{/if}}dto: {{update}}
    {{/if}}
  ): Promise<{{response}}> {
    {{#if (eq name "findAll")}}
      {{#if ../../module.hasRepository}}
      return this.{{../../module.nameLower}}Repository.findAll();
      {{else}}
      throw new Error('findAll not supported');
      {{/if}}
    {{else if (eq name "findOne")}}
      {{#if ../../module.hasRepository}}
      return this.{{../../module.nameLower}}Repository.findOne(id);
      {{else}}
      throw new Error('findOne not supported');
      {{/if}}
    {{else}}
      // TODO: implement {{name}}
      return {} as {{response}};
    {{/if}}
  }
  {{/each}}

}
