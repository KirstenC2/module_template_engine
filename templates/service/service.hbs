import { Injectable } from '@nestjs/common';
{{#if module.hasRepository}}
import { {{module.name}} } from '../models/{{module.nameLower}}.model';
import { {{module.name}}Repository } from '../repositorys/{{module.nameLower}}.repository';
{{/if}}
{{#if module.hasStrategies}}
import { {{module.name}}StrategyFactory } from '../strategies/{{module.nameLower}}-strategy.factory';
{{/if}}

@Injectable()
export class {{module.name}}Service {
  constructor(
    {{#if module.hasStrategies}}
    private readonly strategyFactory: {{module.name}}StrategyFactory
    {{/if}}
    {{#if module.hasRepository}}
    {{#if module.hasStrategies}}, {{/if}}
    private readonly {{module.nameLower}}Repository: {{module.name}}Repository
    {{/if}}

  ) {}

  async create(data: any) {
    {{#if module.hasStrategies}}
    const strategy = this.strategyFactory.getStrategy(data.type);
    return strategy.create(data);
    {{else}}
    return this.{{module.nameLower}}Repository.create(data);
    {{/if}}
  }

  async findAll(){
    {{#if module.hasRepository}}
    return this.{{module.nameLower}}Repository.findAll();
    {{else}}
    throw new Error('findAll not supported (no repository)');
    {{/if}}
  }

  async findOne(id: number){
    {{#if module.hasRepository}}
    return this.{{module.nameLower}}Repository.findOne(id);
    {{else}}
    throw new Error('findOne not supported (no repository)');
    {{/if}}
  }
}
